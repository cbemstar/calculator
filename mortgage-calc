<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Mortgage Calculator</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
<style>
/* styles.css */

body {
    font-family: Arial, sans-serif;
    background-color: #f3f4f6;
    margin: 0;
    padding: 20px;
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
}

.mortgage-calculator {
    background-color: #fff;
    border-radius: 10px;
    box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);
    padding: 20px;
    max-width: 500px;
    width: 100%;
}

h1, h2 {
    color: #333;
}

form {
    display: grid;
    gap: 10px;
}

label {
    font-weight: bold;
}

input[type="text"], input[type="month"] {
    width: 100%;
    padding: 10px;
    border: 1px solid #ccc;
    border-radius: 5px;
    box-sizing: border-box;
    transition: border-color 0.3s ease;
}

input[type="text"]:focus, input[type="month"]:focus {
    border-color: #333;
}

button {
    background-color: #000;
    color: #fff;
    padding: 10px;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    transition: background-color 0.3s ease;
}

button:hover {
    background-color: #333;
}

.results {
    margin-top: 20px;
}

table {
    width: 100%;
    border-collapse: collapse;
    margin-top: 20px;
}

table, th, td {
    border: 1px solid #ccc;
}

th, td {
    padding: 10px;
    text-align: right;
}

thead {
    background-color: #f3f4f6;
}

canvas {
    margin-top: 20px;
}

</style>
    <div class="mortgage-calculator">
        <h1>Mortgage Calculator</h1>
        <form id="mortgageForm">
            <label for="homePrice">Home Price:</label>
            <input type="text" id="homePrice" required oninput="formatNumber(this)">

            <label for="downPayment">Down Payment:</label>
            <input type="text" id="downPayment" required oninput="formatNumber(this)">

            <label for="loanAmount">Loan Amount:</label>
            <input type="text" id="loanAmount" required oninput="formatNumber(this)">

            <label for="interestRate">Interest Rate (%):</label>
            <input type="text" id="interestRate" required>

            <label for="loanTerm">Loan Term (years):</label>
            <input type="text" id="loanTerm" required>

            <label for="startDate">Start Date:</label>
            <input type="month" id="startDate" required>

            <label for="propertyTax">Property Tax (annual):</label>
            <input type="text" id="propertyTax" required oninput="formatNumber(this)">

            <label for="propertyInsurance">Property Insurance (annual):</label>
            <input type="text" id="propertyInsurance" required oninput="formatNumber(this)">

            <label for="extraMonthlyPayments">Extra Monthly Payments:</label>
            <input type="text" id="extraMonthlyPayments" required oninput="formatNumber(this)">

            <label for="monthlyIncome">Monthly Income:</label>
            <input type="text" id="monthlyIncome" required oninput="formatNumber(this)">

            <button type="submit">Calculate</button>
        </form>

        <div class="results">
            <p>Monthly Payment: $<span id="monthlyPayment">0.00</span></p>
            <p>Affordability Ratio: <span id="affordabilityRatio">0.00</span>%</p>
        </div>

        <h2>Amortization Schedule</h2>
        <table id="amortizationSchedule">
            <thead>
                <tr>
                    <th>Month</th>
                    <th>Principal</th>
                    <th>Interest</th>
                    <th>Total Payment</th>
                    <th>Balance</th>
                </tr>
            </thead>
            <tbody>
                <!-- Schedule rows will be inserted here by JavaScript -->
            </tbody>
        </table>

        <canvas id="mortgagePieChart" width="400" height="400"></canvas>
    </div>
    <script> 
  // script.js

function formatNumber(input) {
    const value = input.value.replace(/\D/g, '');
    input.value = Number(value).toLocaleString();
}

function calculateMortgage(event) {
    event.preventDefault();

    const homePrice = parseFloat(document.getElementById('homePrice').value.replace(/,/g, ''));
    const downPayment = parseFloat(document.getElementById('downPayment').value.replace(/,/g, ''));
    const loanAmount = parseFloat(document.getElementById('loanAmount').value.replace(/,/g, ''));
    const interestRate = parseFloat(document.getElementById('interestRate').value) / 100 / 12;
    const loanTerm = parseFloat(document.getElementById('loanTerm').value) * 12;
    const propertyTax = parseFloat(document.getElementById('propertyTax').value.replace(/,/g, '')) / 12;
    const propertyInsurance = parseFloat(document.getElementById('propertyInsurance').value.replace(/,/g, '')) / 12;
    const extraMonthlyPayments = parseFloat(document.getElementById('extraMonthlyPayments').value.replace(/,/g, ''));
    const monthlyIncome = parseFloat(document.getElementById('monthlyIncome').value.replace(/,/g, ''));

    if (isNaN(homePrice) || isNaN(downPayment) || isNaN(loanAmount) || isNaN(interestRate) || isNaN(loanTerm) || isNaN(propertyTax) || isNaN(propertyInsurance) || isNaN(extraMonthlyPayments) || isNaN(monthlyIncome)) {
        alert("Please fill out all required fields.");
        return;
    }

    const principalAndInterest = (loanAmount * interestRate) / (1 - Math.pow(1 + interestRate, -loanTerm));
    const monthlyPayment = principalAndInterest + propertyTax + propertyInsurance + extraMonthlyPayments;
    const affordabilityRatio = (monthlyPayment / monthlyIncome) * 100;

    document.getElementById('monthlyPayment').textContent = monthlyPayment.toFixed(2);
    document.getElementById('affordabilityRatio').textContent = affordabilityRatio.toFixed(2);

    const schedule = calculateAmortizationSchedule(loanAmount, interestRate, loanTerm, principalAndInterest, propertyTax, propertyInsurance, extraMonthlyPayments);
    displayAmortizationSchedule(schedule);
    displayPieChart(monthlyPayment, propertyTax, propertyInsurance, principalAndInterest);
}

function calculateAmortizationSchedule(loanAmount, interestRate, loanTerm, principalAndInterest, propertyTax, propertyInsurance, extraMonthlyPayments) {
    let balance = loanAmount;
    const schedule = [];

    for (let month = 1; month <= loanTerm; month++) {
        const interestPayment = balance * interestRate;
        const principalPayment = principalAndInterest - interestPayment;
        balance -= principalPayment;
        schedule.push({
            month: month,
            principal: principalPayment.toFixed(2),
            interest: interestPayment.toFixed(2),
            totalPayment: (principalPayment + interestPayment + propertyTax + propertyInsurance + extraMonthlyPayments).toFixed(2),
            balance: balance.toFixed(2)
        });
    }
    return schedule;
}

function displayAmortizationSchedule(schedule) {
    const tbody = document.querySelector('#amortizationSchedule tbody');
    tbody.innerHTML = '';

    schedule.forEach(payment => {
        const row = document.createElement('tr');
        row.innerHTML = `
            <td>${payment.month}</td>
            <td>${payment.principal}</td>
            <td>${payment.interest}</td>
            <td>${payment.totalPayment}</td>
            <td>${payment.balance}</td>
        `;
        tbody.appendChild(row);
    });
}

function displayPieChart(monthlyPayment, propertyTax, propertyInsurance, principalAndInterest) {
    const ctx = document.getElementById('mortgagePieChart').getContext('2d');
    new Chart(ctx, {
        type: 'pie',
        data: {
            labels: ['Principal & Interest', 'Property Tax', 'Property Insurance', 'Extra Monthly Payments'],
            datasets: [{
                data: [principalAndInterest, propertyTax, propertyInsurance, monthlyPayment - (principalAndInterest + propertyTax + propertyInsurance)],
                backgroundColor: ['#4caf50', '#ffeb3b', '#f44336', '#2196f3']
            }]
        },
        options: {
            responsive: true,
            plugins: {
                legend: {
                    position: 'bottom',
                },
            }
        }
    });
}
</script>
</body>
</html>
